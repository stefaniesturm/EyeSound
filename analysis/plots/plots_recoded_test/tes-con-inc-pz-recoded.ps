%!PS-Adobe-3.0 EPSF-3.0
%%LanguageLevel: 2
%%DocumentData: Clean8Bit
%%Pages: 1
% $Id: sigmap.pps 1762 2008-03-14 13:15:30Z rsmies $

%%Creator: xavr 2640
%%CreationDate: Tue Feb 22 11:27:56 2022
%%Title: ../cfg/xavr_single_electrode.cfg
%%For: ssturm - 

%%Orientation: Landscape
%%BoundingBox: 0 0 227 567
%%DocumentNeededResources: font Fixed Helvetica

%%EndComments

%%BeginProlog
200 dict begin

/InitPageGS {
  72 25.4 div dup scale                  % set gs units to mm
  PageX PageY translate                  % handle paper size/orientation
  PageAngle   rotate
  0 setlinecap
  true setstrokeadjust
} def


% the "Print Current View" option - clip the visible region
% and fit it centered into the given physical paper sheet extents
/InitViewGS {
  % undo the "shift to upper edge" in portrait orientation
  PageAngle 0 eq {
    0 PageY neg translate
  } if

  % find effective sheet size (without margins)
  /swm SheetW PlotViewMargin 2 mul sub def
  /shm SheetH PlotViewMargin 2 mul sub def
  
  % scale view to fit height or width, whichever is smaller
  swm ViewW div shm ViewH div lt {
    % fit width, center height
    /vscale swm ViewW div def
    PlotViewMargin PlotViewMargin shm ViewH vscale mul sub 2 div add translate
  } {
    % fit height, center width
    /vscale shm ViewH div def
    PlotViewMargin swm ViewW vscale mul sub 2 div add PlotViewMargin translate
  }
  ifelse
  vscale dup scale
  ViewX neg ViewY neg translate
  ViewX ViewY ViewW ViewH rectclip
} def

/InitFieldGS {
  /s_per_mm f_tmax f_tmin sub f_width  div def  % scale mm to diagram coords
  /u_per_mm f_ymax f_ymin sub f_height div def
  /mm_per_s 1.0 s_per_mm div def
  /mm_per_u 1.0 u_per_mm div def
  f_x f_y translate                               % locate field (in mm)
  mm_per_s mm_per_u scale                         % set diagram scales 
  0 f_tmin sub 0 f_ymin sub translate             % and diagram origin
} bind def

/ClipFieldGS {
  f_tmin                                     % clip to width, 20 * height
  f_ymin f_ymax f_ymin sub abs 10 mul sub
  f_tmax f_tmin sub
  f_ymax f_ymin sub abs 21 mul
  rectclip
} bind def

% EPS file inclusion frame
% from the Adobe PostScript Language Reference Manual
/BeginEPSF { 
  /b4_Inc_state save def
  /dict_count countdictstack def
  /op_count count 1 sub def
  userdict begin
  /showpage {} def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [] 0 setdash newpath
  false setstrokeadjust false setoverprint
} bind def

/EndEPSF {
  count op_count sub {pop} repeat
  countdictstack dict_count sub {end} repeat
  b4_Inc_state restore
} bind def

% fit epsf bounding box into xavr object field
/FitEPSF {
  % debug - outline xavr field
  %0 0 field_w field_h rectstroke
  %0 0 2 2 rectfill
  
  /bbox_w bbox_urx bbox_llx sub def
  /bbox_h bbox_ury bbox_lly sub def
  field_x field_y translate                     % to xavr field lower left
  field_w 2 div field_h 2 div translate         % to xavr field center point
  
  % fit total x-extent of rotated bbox into xavr field width
  field_w bbox_w bbox_ang cos abs mul bbox_h bbox_ang sin abs mul add div
  % same for y or copy x scaling
  bbox_fit {
    field_h bbox_w bbox_ang sin abs mul bbox_h bbox_ang cos abs mul add div
  } {
    dup
  } ifelse
  scale

  bbox_ang rotate
  bbox_w 2 div neg bbox_h 2 div neg translate  % back from center to lower left
  bbox_llx neg bbox_lly neg translate          % handle bbox origin
  
  % debug - outline EPSF bounding box in the transformed system
  %1 0 0 rgb2cmyk 
  %bbox_llx bbox_lly bbox_w bbox_h rectstroke
  %bbox_llx bbox_lly 10 10 rectfill
} bind def

% to ease subsequent processing, only the CMYK ad GRAY color models
% are used, no RGB
% xavr supplies RGB components but they are transformed into its
% complementary CMYK components here
/rgb2cmyk {
  /_blue  exch def
  /_green exch def
  /_red   exch def

  _red _green add _blue add 0.0 eq {
    0 0 0 1
  } {
    1 _red sub 1 _green sub 1 _blue sub 0 
  } ifelse

  setcmykcolor
} bind def


/MMstroke {
  % set CTM from field coords to mm, set linewidth, restore field coords
  s_per_mm u_per_mm scale stroke mm_per_s mm_per_u scale
} bind def


% decode/render the diagram traces 
/CuGS {
  % period t0 y0 ==> (empty)
  translate
  dup 1 scale /Period exch def
  currentlinecap 1 eq { 1 setlinejoin } if 
%  1 setlinecap
  newpath 0 0 moveto
} bind def

/CuPath {
  % (file) filter, (int) control -> (file) filter
  1000 mod 0 eq {CuStroke} if         % avoid path overflow
  dup read pop                        % preserve file, ignore status while reading
  CodeScale mul                       % calc the real difference vector from encoding
  CodeOffset add
  1 exch rlineto
} bind def

/CuStroke {
  currentpoint                        % note start point for next section
  1 Period div 1 scale                % back to field units
  MMstroke                            % back to mm, stroke, back to field
  Period 1 scale                      % continue path in samples
  moveto
} bind def

/CuDec {
  /CodeOffset exch def
  /CodeScale  exch def  
  currentfile /ASCII85Decode filter
} bind def

% sensor dot plot in map objects
% (a white filled circle, surrounded by a line in current style)
/Sens {
  % x y r ==> (empty)
  0 360 arc closepath gsave 1 setgray fill grestore stroke
} bind def

/ScaleDash {
  % linewidth dash_array ==> dash_array

  /sc_array  exch def
  /sc_factor exch def
  /out_array sc_array length array def
  /is_round currentlinecap 0 gt def

  0 1 sc_array length 1 sub {
    dup /sc_index exch def
    sc_array sc_index get sc_factor mul  % scale each entry with the linewidth

    is_round {                           % round/proj cap forces drawn lines to
      sc_index 2 mod 0 eq                % be longer then given - therefore
        { sc_factor sub                  %   shorten the drawn parts
          dup 0.0 lt {0 exch pop} if }   %     (but avoid negative lengths)
        { sc_factor add }                %   enlarge the empty parts
      ifelse
    } if
    out_array 3 1 roll put
  } for
  out_array
} bind def

% was LStyleInitGS
/LI {
  % red green blue dashindex linewidth linecap ==> (empty)
  gsave
  setlinecap
  dup
  setlinewidth
  exch
  DashList exch get
  % scale the dash pattern array if required
  dup length 1 gt {ScaleDash} {exch pop} ifelse
  0 setdash
  rgb2cmyk
} bind def

% was LStyleFreeGS
/LF {
  grestore
} bind def

/ALIGN_CENTER 0 def
/ALIGN_TOP    1 def
/ALIGN_BOTTOM 2 def
/ALIGN_RIGHT  3 def
/ALIGN_LEFT   4 def

% was TStylePlot
/TP {
  % text tsize tah tav x y  ==> (empty)
  /ty exch def
  /tx exch def
  /tav exch def
  /tah exch def
  0.7 mul /tsize exch def              % ignore font descent for positioning
  /ttext exch def
  ttext stringwidth pop /twidth exch def
  tah ALIGN_CENTER eq {
    /tx tx twidth 0.5 mul sub def
  } if
  tah ALIGN_RIGHT eq {
    /tx tx twidth sub def
  } if
  tav ALIGN_CENTER eq {
    /ty ty tsize 0.5 mul sub def
  } if
  tav ALIGN_TOP eq {
    /ty ty tsize sub def
  } if
  tx ty moveto ttext show
} bind def

/std2iso {
  % font ==>  font
  dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def
    currentdict
  end
} bind def

% draw gray
/DG {
  %   x width grayindex ==> (empty)

  GrayScale exch get setgray
  y exch height rectfill
} bind def

% time axis div
/TD {
  %   x ==> (empty)
  y1 moveto 0 len rlineto
} bind def

% ampl axis div
/AD {
  %  y ==> (empty)
  x1 exch moveto len 0 rlineto
} bind def

% line 
/LS {
  % x2, y2, x1, y1   ==>  (empty)
  moveto lineto stroke
} bind def

/PalS {
  % colorindex mapindex ==> (empty)
  Pal exch get
  exch get dup 0 get exch dup 1 get exch 2 get rgb2cmyk
} bind def

/InstitutionLogo [(EEProbe)(A.N.T. Software)] def
/SetPos {
  gsave translate
} bind def
/sBB {                                  % get bounding box of string
  gsave
  0 0 moveto
  dup false charpath                    % string not removed from stack
  flattenpath pathbbox                  % ll.x, ll.y, ur.x, ur.y  on stack
  grestore
} bind def
/sH {                                   % get height of string
  sBB
  4 1 roll pop pop pop
} bind def

/DrawLogo {
  11 5 translate
  /Helvetica findfont 3 scalefont setfont
  /logoW 0 def
  dup {                                 % get width of longest string
    stringwidth pop dup logoW ge {/logoW exch def} {pop} ifelse
  } forall
  0 logoW 2 div add 1.5 add -5 SetPos   % set coord. (0,0) at center of logo
  1 setgray
  logoW 2 div neg 1.5 sub -2
  logoW 3 add 4 rectfill               % clear area
  0 setgray
  dup 0 get
  dup stringwidth pop 2 div neg 0 moveto show   % print upper string centered
  /Helvetica findfont 2.7 scalefont setfont 
  (Z) sH /logoFh exch def pop                 % get height of lower string
  1 get
  dup stringwidth pop 2 div neg logoFh neg 0.7 sub moveto show     % print lower string centered
  grestore
} bind def

/DrawFrame {
  gsave
  0 setgray 0.30 setlinewidth [] 0 setdash
  frame_x frame_y translate

  % => the next 2 lines may be commented out to disable the drawing of ...
  0 0 frame_width frame_height rectstroke    % the frame around the whole diagram
  InstitutionLogo DrawLogo                               % the institution logo
  grestore
} bind def

/DrawFrameMPI_CNS {
  gsave
  12 dict begin
  /MPItext  (A.N.T Software) def
  /blueLW    2.5 def     % width of blue part of frame
  /yellowLW  0.36 def    % width of yellow part
  %isLaserPrinter {
  %   /MPIblue   {0.5 0.5 0.5 rgb2cmyk} bind def
  %  /MPIyellow {0.8 0.8 0.8 rgb2cmyk} bind def
  %  currentscreen 3 -1 roll pop 150 3 1 roll setscreen
  %} {
    /MPIblue   {0 0 0.52 rgb2cmyk} bind def
    /MPIyellow {1 1 0 rgb2cmyk} bind def
  %} ifelse
  /FontMPI1  /Times-Roman findfont 3.121 scalefont def
  /MPIF1 {FontMPI1 setfont} bind def
  /FontMPI2  /Times-Roman findfont 4.161 scalefont def
  /MPIF2 {FontMPI2 setfont} bind def
  blueLW 2 div dup frame_x add exch frame_y add translate
  [] 0 setdash 0 setlinecap 0 setlinejoin MPIblue blueLW setlinewidth
  0 0 frame_width blueLW sub frame_height blueLW sub rectstroke
  MPIyellow yellowLW setlinewidth
  yellowLW 2 div blueLW 2 div add dup
  blueLW 2 mul yellowLW add dup frame_width exch sub exch frame_height exch sub rectstroke
  MPIblue MPIF1 /largeChar 0 def
  frame_width blueLW 2 div sub -5 moveto
  MPItext length 1 sub -1 0 {
    dup MPItext exch get 94 eq {
      MPIF2 /largeChar 1 def pop
    } {
      MPItext exch 1 getinterval
      dup stringwidth pop neg dup 0 rmoveto exch show 0 rmoveto
      largeChar 1 eq { MPIF1 /largeChar 0 def } if
    } ifelse
  } for
  grestore

  % scale whole diagram to fit into the reduced inner space
  blueLW yellowLW add dup dup translate
  2 mul frame_width div 1 sub neg dup scale

  end
} bind def


% arrow object plot method

/AS {
  % x2, y2, x1, y1, len, ang   ==>  (empty)

  /arr_ang exch def
  /arr_len exch def
  /arr_y1  exch def
  /arr_x1  exch def
  /arr_y2  exch def
  /arr_x2  exch def
  
  % calc vector length, angle, arrow width from passed params
  /arr_totlen 
    arr_x2 arr_x1 sub dup mul 
    arr_y2 arr_y1 sub dup mul add sqrt 
  def
  /arr_sinphi
    arr_y2 arr_y1 sub arr_totlen div
  def
  /arr_cosphi
    arr_x2 arr_x1 sub arr_totlen div
  def
  /arr_h 
    arr_len arr_ang 2.0 div dup sin exch cos div mul
  def
  
  % substract arrow head length from linelength and draw the shortened line
  arr_x1 arr_y1 moveto
  arr_totlen arr_len 0.99 mul sub arr_cosphi mul
  arr_totlen arr_len 0.99 mul sub arr_sinphi mul
  rlineto stroke
  
  % calc and draw the arrow head triangle
  arr_x2 arr_y2 moveto
  arr_len arr_cosphi neg mul arr_h arr_sinphi neg mul sub arr_x2 add
  arr_len arr_sinphi neg mul arr_h arr_cosphi neg mul add arr_y2 add
  lineto
  /arr_h arr_h neg def
  arr_len arr_cosphi neg mul arr_h arr_sinphi neg mul sub arr_x2 add
  arr_len arr_sinphi neg mul arr_h arr_cosphi neg mul add arr_y2 add
  lineto fill
  
} bind def

% obsolete arrow functions for PostScript hackers
% replaced by xavr's arrow object (see above) which is implemented 
% without "rotate" since some including appications cannot 
% handle "odd" rotation angles

/Arrow {  
%   x0 y0 x1 y1 half_linewidth half_headwidth headlength ==> (empty)

        13 dict begin
        /Headlength exch def
        /Halfheadthickness exch 2 div def
        /Halfthickness exch 2 div def
        /Tipy exch def
        /Tipx exch def
        /Taily exch def
        /Tailx exch def
        /Dx Tipx Tailx sub def
        /Dy Tipy Taily sub def
        /Arrowlength Dx Dx mul Dy Dy mul add sqrt def
        /Angle Dy Dx atan def
        /Base Arrowlength Headlength sub def
        /Savematrix matrix currentmatrix def
        
        Tailx Taily translate
        Angle rotate
        0 Halfthickness neg moveto
        Base Halfthickness neg
        lineto
        Base Halfheadthickness
        neg lineto
        Arrowlength 0 lineto
        Base Halfheadthickness lineto
        Base Halfthickness lineto
        0 Halfthickness lineto
        closepath
        
        Savematrix setmatrix
        end
} bind def

/FilledArrow {
  gsave
  0 setlinewidth newpath Arrow fill
  grestore
} bind def

%%EndProlog

% -------------------------------------------------------------------
%%BeginSetup


% prepare page extents
/PlotView 0 def
/PageX 80.00 def
/PageY 0.00 def
/PageAngle 90.00 def

% prepare fonts (ISO-Latin1 encoding + scaling
%%IncludeResource: font Fixed
%%IncludeResource: font Helvetica
/Fixed findfont 2.00 scalefont std2iso /CF0 exch definefont pop
/Helvetica findfont 4.00 scalefont std2iso /CF1 exch definefont pop
/Helvetica findfont 5.00 scalefont std2iso /CF2 exch definefont pop
/Helvetica findfont 3.00 scalefont std2iso /CF3 exch definefont pop
/Helvetica findfont 1.20 scalefont std2iso /CF4 exch definefont pop

/DashList [
[]
[1.00 0.80 ]
[4.00 1.00 ]
[4.00 1.00 1.00 1.00 ]
[4.00 1.00 1.00 1.00 1.00 1.00 ]
[8.00 1.00 ]
[8.00 1.00 4.00 1.00 ]
[]
[]
[]
] def

/Pal [
] def
/frame_x 15.00 def /frame_y 10.00 def
/frame_width 170.00 def /frame_height 60.00 def

% significance grayscale colors
/GrayScale [1.00 0.62 0.38 0.12] def

%%EndSetup

% I know, it should read %%Page: 1 1 or so, but my favourite previewer
% is confused then. Strange.
%%Page: 1
%%BeginPageSetup
InitPageGS
PlotView 1 eq {
  InitViewGS
} if
%%EndPageSetup

% -------------------------------------------------------------------
% draw the particular fields

%DrawFrame
%DrawFrameMPI_CNS
%%BeginObject: (000 diagram Pz)
0.00 0.00 0.00 0 0.150 0 LI
/CF3 findfont setfont
0.00 0.00 0.00 rgb2cmyk
2 setlinecap/y1 44.500 def /len 1.000 def
47.50 TD (0.2) 3.00 0 1 47.50 43.90 TP
65.83 TD (0.4) 3.00 0 1 65.83 43.90 TP
stroke LF
0.00 0.00 0.00 0 0.150 0 LI
/CF3 findfont setfont
0.00 0.00 0.00 rgb2cmyk
2 setlinecap/x1 28.667 def /len 1.000 def
58.33 AD 
(-2.0) 3.00 3 0 28.07 58.33 TP
31.67 AD (2.0) 3.00 3 0 28.07 31.67 TP
stroke LF
0.00 0.00 0.00 0 0.150 0 LI
75.00 45.00 20.00 45.00 LS
LF
0.00 0.00 0.00 0 0.150 0 LI
29.17 65.00 29.17 25.00 LS
LF
/CF2 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(Pz) 5.00 3 1 75.00 65.00 TP
gsave
/f_x 20.00 def /f_y 25.00 def /f_width 55.00 def /f_height 40.00 def
/f_tmin -1.000000e-01 def /f_tmax 5.000000e-01 def /f_ymin 3.000000e+00 def /f_ymax -3.000000e+00 def
InitFieldGS
ClipFieldGS
0.00 0.00 1.00 0 0.300 1 LI
gsave
2.000000e-03 -1.000000e-01 2.472793e-01 CuGS 9.133794e-04 -1.291295e-01 CuDec
0 1 298 {CuPath} for
AnP1R?Y=(mFbbU4Occ#lNfJjMK8tbIRZt"QVQ6eqT:_%$H@C$YF*2n_M3F'dR%T_'OaqY%FD,o<HAd`X
X0fsdd`]kU]WRfaG\C/N4u"TD/hT"D4%Mh4;,'\I2a&E.)\3AY%L!Lb-S@_kC4M;@[*%%]l0S!1kN1RG
bf.*"Z*U^G^V\7Igu@Vio)A1Up%%YAoC1u3mI'/tk2>(>f?)4M]tLqU[A'XqR@Bb9OI)?)XJiG5]>V\/
a2u61\ZN*2Vk0WYWiN5.Z*^a6YFh)FNeraPO.)oCY.1sZ\[AQ4R?rPUI!0sdK85VSNg5HVJ9>I=;GC%e
;H7%?Ed3(hKnPG7Mgp82KSP;CQ'I]&S!]5(L5UnBKoV=]USOolYcOf~>
CuStroke pop
grestore
LF
1.00 0.00 0.00 0 0.300 1 LI
gsave
2.000000e-03 -1.000000e-01 9.184612e-02 CuGS 9.627081e-04 -1.449280e-01 CuDec
0 1 298 {CuPath} for
T:M[IS#)aIS=Gn-Q\:!AG]@kNFFAOiNL$''USar^VOj69P`:][O-H$*Uo:K$Z)smnQAL6@DeEj$C35#_
OJJe]^;7FjZ_jCVI<&pr;aX/C78?fc>\n>&FEDG4=%th.)\rV^!XBA_2ah#-OfZUOhWX7kiSi>3^V$tY
XJWD4]YDq=jlZ()q#1-hp%S(Cl/q3bio&e`kO/!/p?1l$e^)(?Wh#]IOI)K:YdV9baO%iJZFmE<Vj3jD
URnWm\\>Yi\ZrE:Q'.5fLQ%4YSu&?lXgY7,Tq7R/Obo$UPa@i0S=Z.;JVS8kC2%?uFENFsPanPFT;%p@
P^ndFL5_4VS>)^QWMH)VNK]0TNJ<OUU8+os\$<3;U84'>QB.H&V67Q~>
CuStroke pop
grestore
LF
0.00 0.00 0.00 0 0.300 1 LI
gsave
2.000000e-03 -1.000000e-01 1.554331e-01 CuGS 5.115646e-04 -7.120891e-02 CuDec
0 1 298 {CuPath} for
1clI*0J#:[=EAkZPI&6;a4%Z5]"YJO[[+_2TqeB[NgkWhDh)qND.@EkC34$#Ck-nbO-#-cX.Zu%]uRG)
bIH'0]r8HLWMZ&LP`LKaI=lEnHt[>2BjOh8?<g]@Bn^bmVk:8h^ne!!LOO&><),):8R6LiV5VGeguRG>
eBXbXJqI3N:/t8"?sn,)NLu?8WN;o'Za-3gSs+MQGDL9bP)cQ=^=19=i2sAIE,&KL1GVEkLO#B"_!C.A
iT.hQS9Kg"H?Oe'`5U-ckhk@-]o.DJA4C3BI$;"acg^?#ilo30RYu<(P^g$<a4fe@b1`GQHr;XO'*8mp
.8<KWI!U7!EG'>s@TR;[OFj"&VRih+Ob@%[5uU]cAoj?/ZGa5gX-7Z~>
CuStroke pop
grestore
LF
grestore
%%EndObject
%%BeginObject: (001 text)
/CF3 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(congruent test sounds) 3.00 4 2 86.50 50.80 TP
%%EndObject
%%BeginObject: (002 text)
/CF3 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(incongruent test sounds) 3.00 4 2 86.50 46.60 TP
%%EndObject
%%BeginObject: (003 text)
/CF3 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(difference) 3.00 4 2 86.50 42.40 TP
%%EndObject
%%BeginObject: (004 line)
0.00 0.00 1.00 0 0.300 1 LI
85.00 52.00 80.00 52.00 LS
LF
%%EndObject
%%BeginObject: (005 line)
1.00 0.00 0.00 0 0.300 1 LI
85.00 47.80 80.00 47.80 LS
LF
%%EndObject
%%BeginObject: (006 line)
0.00 0.00 0.00 0 0.300 1 LI
85.00 43.60 80.00 43.60 LS
LF
%%EndObject
%%BeginObject: (007 text)
/CF1 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(Legend:) 4.00 4 2 80.00 120.00 TP
%%EndObject
%%BeginObject: (008 text)
/CF1 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(Legend:) 4.00 4 2 80.00 120.00 TP
%%EndObject
%%BeginObject: (009 text)
/CF1 findfont setfont
0.00 0.00 0.00 rgb2cmyk
(Legend:) 4.00 4 2 80.00 120.00 TP
%%EndObject

% -------------------------------------------------------------------
% cleanup

%%Trailer
end 
showpage
%%EOF
